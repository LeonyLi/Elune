<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.elune.dao.UserMapper">
  <resultMap id="BaseResultMap" type="com.elune.entity.UserEntity">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="password" jdbcType="VARCHAR" property="password" />
    <result column="username" jdbcType="VARCHAR" property="username" />
    <result column="nickname" jdbcType="VARCHAR" property="nickname" />
    <result column="email" jdbcType="VARCHAR" property="email" />
    <result column="url" jdbcType="VARCHAR" property="url" />
    <result column="join_time" jdbcType="INTEGER" property="joinTime" />
    <result column="last_seen" jdbcType="INTEGER" property="lastSeen" />
    <result column="status" jdbcType="TINYINT" property="status" />
    <result column="bio" jdbcType="VARCHAR" property="bio" />
    <result column="avatar" jdbcType="VARCHAR" property="avatar" />
    <result column="update_time" jdbcType="INTEGER" property="updateTime" />
    <result column="role_id" jdbcType="TINYINT" property="roleId" />
    <result column="topics_count" jdbcType="INTEGER" property="topicsCount" />
    <result column="posts_count" jdbcType="INTEGER" property="postsCount" />
    <result column="articles_count" jdbcType="INTEGER" property="articlesCount" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, password, username, nickname, email, url, join_time, last_seen, status, bio,
    avatar, update_time, role_id, topics_count, posts_count, articles_count
  </sql>
  <select id="selectByExample" parameterType="com.elune.entity.UserEntityExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from t_user
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="limit != null">
      <if test="offset != null">
        limit ${offset}, ${limit}
      </if>
      <if test="offset == null">
        limit ${limit}
      </if>
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from t_user
    where id = #{id,jdbcType=BIGINT}
  </select>
  <select id="selectByUsername" parameterType="java.lang.String" resultMap="BaseResultMap">
      select
      <include refid="Base_Column_List" />
      from t_user
      where username = #{id,jdbcType=VARCHAR}
  </select>
  <select id="selectByEmail" parameterType="java.lang.String" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from t_user
    where email = #{id,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from t_user
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.elune.entity.UserEntityExample">
    delete from t_user
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.elune.entity.UserEntity">
    insert into t_user (id, password, username,
      nickname, email, url,
      join_time, last_seen, status,
      bio, avatar, update_time,
      role_id, topics_count, posts_count,
      articles_count)
    values (#{id,jdbcType=BIGINT}, #{password,jdbcType=VARCHAR}, #{username,jdbcType=VARCHAR},
      #{nickname,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR}, #{url,jdbcType=VARCHAR},
      #{joinTime,jdbcType=INTEGER}, #{lastSeen,jdbcType=INTEGER}, #{status,jdbcType=TINYINT},
      #{bio,jdbcType=VARCHAR}, #{avatar,jdbcType=VARCHAR}, #{updateTime,jdbcType=INTEGER},
      #{roleId,jdbcType=TINYINT}, #{topicsCount,jdbcType=INTEGER}, #{postsCount,jdbcType=INTEGER},
      #{articlesCount,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.elune.entity.UserEntity" useGeneratedKeys="true" keyProperty="id">
    insert into t_user
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="password != null">
        password,
      </if>
      <if test="username != null">
        username,
      </if>
      <if test="nickname != null">
        nickname,
      </if>
      <if test="email != null">
        email,
      </if>
      <if test="url != null">
        url,
      </if>
      <if test="joinTime != null">
        join_time,
      </if>
      <if test="lastSeen != null">
        last_seen,
      </if>
      <if test="status != null">
        status,
      </if>
      <if test="bio != null">
        bio,
      </if>
      <if test="avatar != null">
        avatar,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
      <if test="roleId != null">
        role_id,
      </if>
      <if test="topicsCount != null">
        topics_count,
      </if>
      <if test="postsCount != null">
        posts_count,
      </if>
      <if test="articlesCount != null">
        articles_count,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="password != null">
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="username != null">
        #{username,jdbcType=VARCHAR},
      </if>
      <if test="nickname != null">
        #{nickname,jdbcType=VARCHAR},
      </if>
      <if test="email != null">
        #{email,jdbcType=VARCHAR},
      </if>
      <if test="url != null">
        #{url,jdbcType=VARCHAR},
      </if>
      <if test="joinTime != null">
        #{joinTime,jdbcType=INTEGER},
      </if>
      <if test="lastSeen != null">
        #{lastSeen,jdbcType=INTEGER},
      </if>
      <if test="status != null">
        #{status,jdbcType=TINYINT},
      </if>
      <if test="bio != null">
        #{bio,jdbcType=VARCHAR},
      </if>
      <if test="avatar != null">
        #{avatar,jdbcType=VARCHAR},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=INTEGER},
      </if>
      <if test="roleId != null">
        #{roleId,jdbcType=TINYINT},
      </if>
      <if test="topicsCount != null">
        #{topicsCount,jdbcType=INTEGER},
      </if>
      <if test="postsCount != null">
        #{postsCount,jdbcType=INTEGER},
      </if>
      <if test="articlesCount != null">
        #{articlesCount,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.elune.entity.UserEntityExample" resultType="java.lang.Long">
    select count(*) from t_user
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update t_user
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.password != null">
        password = #{record.password,jdbcType=VARCHAR},
      </if>
      <if test="record.username != null">
        username = #{record.username,jdbcType=VARCHAR},
      </if>
      <if test="record.nickname != null">
        nickname = #{record.nickname,jdbcType=VARCHAR},
      </if>
      <if test="record.email != null">
        email = #{record.email,jdbcType=VARCHAR},
      </if>
      <if test="record.url != null">
        url = #{record.url,jdbcType=VARCHAR},
      </if>
      <if test="record.joinTime != null">
        join_time = #{record.joinTime,jdbcType=INTEGER},
      </if>
      <if test="record.lastSeen != null">
        last_seen = #{record.lastSeen,jdbcType=INTEGER},
      </if>
      <if test="record.status != null">
        status = #{record.status,jdbcType=TINYINT},
      </if>
      <if test="record.bio != null">
        bio = #{record.bio,jdbcType=VARCHAR},
      </if>
      <if test="record.avatar != null">
        avatar = #{record.avatar,jdbcType=VARCHAR},
      </if>
      <if test="record.updateTime != null">
        update_time = #{record.updateTime,jdbcType=INTEGER},
      </if>
      <if test="record.roleId != null">
        role_id = #{record.roleId,jdbcType=TINYINT},
      </if>
      <if test="record.topicsCount != null">
        topics_count = #{record.topicsCount,jdbcType=INTEGER},
      </if>
      <if test="record.postsCount != null">
        posts_count = #{record.postsCount,jdbcType=INTEGER},
      </if>
      <if test="record.articlesCount != null">
        articles_count = #{record.articlesCount,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update t_user
    set id = #{record.id,jdbcType=BIGINT},
      password = #{record.password,jdbcType=VARCHAR},
      username = #{record.username,jdbcType=VARCHAR},
      nickname = #{record.nickname,jdbcType=VARCHAR},
      email = #{record.email,jdbcType=VARCHAR},
      url = #{record.url,jdbcType=VARCHAR},
      join_time = #{record.joinTime,jdbcType=INTEGER},
      last_seen = #{record.lastSeen,jdbcType=INTEGER},
      status = #{record.status,jdbcType=TINYINT},
      bio = #{record.bio,jdbcType=VARCHAR},
      avatar = #{record.avatar,jdbcType=VARCHAR},
      update_time = #{record.updateTime,jdbcType=INTEGER},
      role_id = #{record.roleId,jdbcType=TINYINT},
      topics_count = #{record.topicsCount,jdbcType=INTEGER},
      posts_count = #{record.postsCount,jdbcType=INTEGER},
      articles_count = #{record.articlesCount,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.elune.entity.UserEntity">
    update t_user
    <set>
      <if test="password != null">
        password = #{password,jdbcType=VARCHAR},
      </if>
      <if test="username != null">
        username = #{username,jdbcType=VARCHAR},
      </if>
      <if test="nickname != null">
        nickname = #{nickname,jdbcType=VARCHAR},
      </if>
      <if test="email != null">
        email = #{email,jdbcType=VARCHAR},
      </if>
      <if test="url != null">
        url = #{url,jdbcType=VARCHAR},
      </if>
      <if test="joinTime != null">
        join_time = #{joinTime,jdbcType=INTEGER},
      </if>
      <if test="lastSeen != null">
        last_seen = #{lastSeen,jdbcType=INTEGER},
      </if>
      <if test="status != null">
        status = #{status,jdbcType=TINYINT},
      </if>
      <if test="bio != null">
        bio = #{bio,jdbcType=VARCHAR},
      </if>
      <if test="avatar != null">
        avatar = #{avatar,jdbcType=VARCHAR},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=INTEGER},
      </if>
      <if test="roleId != null">
        role_id = #{roleId,jdbcType=TINYINT},
      </if>
      <if test="topicsCount != null">
        topics_count = #{topicsCount,jdbcType=INTEGER},
      </if>
      <if test="postsCount != null">
        posts_count = #{postsCount,jdbcType=INTEGER},
      </if>
      <if test="articlesCount != null">
        articles_count = #{articlesCount,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.elune.entity.UserEntity">
    update t_user
    set password = #{password,jdbcType=VARCHAR},
      username = #{username,jdbcType=VARCHAR},
      nickname = #{nickname,jdbcType=VARCHAR},
      email = #{email,jdbcType=VARCHAR},
      url = #{url,jdbcType=VARCHAR},
      join_time = #{joinTime,jdbcType=INTEGER},
      last_seen = #{lastSeen,jdbcType=INTEGER},
      status = #{status,jdbcType=TINYINT},
      bio = #{bio,jdbcType=VARCHAR},
      avatar = #{avatar,jdbcType=VARCHAR},
      update_time = #{updateTime,jdbcType=INTEGER},
      role_id = #{roleId,jdbcType=TINYINT},
      topics_count = #{topicsCount,jdbcType=INTEGER},
      posts_count = #{postsCount,jdbcType=INTEGER},
      articles_count = #{articlesCount,jdbcType=INTEGER}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>
